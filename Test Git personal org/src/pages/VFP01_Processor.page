<apex:page >

<script type="text/javascript">
var __sfdcSessionId = '{!GETSESSIONID()}';
</script>
<script src="../../soap/ajax/28.0/connection.js"
type="text/javascript"></script>
<script type="text/javascript"> 
var pData = [];
window.onload = setupPage;
    
    function setupPage() 
    {
        //state that you need when the callback is called
        var state = { 
        output : document.getElementById("output"),
        startTime : new Date().getTime()};

        var CurrentUserId = "{!$User.Id}";
        
        // Get the current execution counter
        result = sforce.connection.query("Select Id,Name,ContextIterator__c,Running_User__c from Execution_Summary__c limit 1");
        records = result.getArray("records");
        var record = records[0];
        
        // Get the total profileusers counter
        profileuserCounterResult = sforce.connection.query("Select ProfileUsersCounter__c from ProfileCounter__c limit 1");
        puCounterrecords = profileuserCounterResult.getArray("records");
        var profileUserCounter = parseInt(puCounterrecords[0].ProfileUsersCounter__c);
        
        if(CurrentUserId.indexOf(record.Running_User__c) != -1 && parseInt(record.ContextIterator__c) >=  parseInt(profileUserCounter))
        {
            state.output.innerHTML = "<h1>Congratulations you have successfully generated the report.</h1>";
            
            // Reset the execution counter
            var execSum = new sforce.SObject("Execution_Summary__c");
            execSum.id = record.Id;
            execSum.ContextIterator__c = 0 ;
            execSumResult = sforce.connection.update([execSum]);
            
            getObj = sforce.connection.query("select ReportFormat__c from DataInput__c limit 1");
            recObj = getObj.getArray("records");
            repFormat = recObj[0].ReportFormat__c;
                
            // Based on the report format selection display the report accordingly
            if(repFormat =='Excel')
                window.location.href ='/apex/VFP01_ReportExcel';
            else
                window.location.href ='/apex/VFP01_ReportPDF';
            
            return 0;
        }
        
        // Get the current URL
        resultFL = sforce.connection.query("Select Id,nextURL__c,InvokeCounter__c from FLURL__c limit 1");
        recordsFL = resultFL.getArray("records");
        
        if(recordsFL.length>0)
        {
            // Increment the invoke counter every time.
            var incSum = new sforce.SObject("FLURL__c");
            incSum.id = recordsFL[0].Id
            incSum.InvokeCounter__c = parseInt(recordsFL[0].InvokeCounter__c) + 1 ;
            incSumResult = sforce.connection.update([incSum]);
      
            if(CurrentUserId.indexOf(record.Running_User__c) != -1 )
            {
                window.location.href = recordsFL[0].nextURL__c;
                return 0;
            }
            else if((parseInt(recordsFL[0].InvokeCounter__c)%2 == 0) )
            {
                // Increment the invoke counter every time.
                var iincSum = new sforce.SObject("FLURL__c");
                iincSum.id = recordsFL[0].Id
                iincSum.InvokeCounter__c = 0 ;
                iincSumResult = sforce.connection.update([iincSum]);
                window.location.href = '/secur/logout.jsp';
                return 0;
            }
        }
        
        // Increment the execution counter after scanning the layout properties for each profile.
        var execSum = new sforce.SObject("Execution_Summary__c");
        execSum.id = record.Id
        execSum.ContextIterator__c = parseInt(record.ContextIterator__c) + 1 ;
        execSumResult = sforce.connection.update([execSum]);
        
        var nextuserid = '';
        
        if(parseInt(record.ContextIterator__c) <  parseInt(profileUserCounter))
        { 
            if(parseInt(record.ContextIterator__c) == 0)
            {
                // Execute this for the very first iteration
                nuser = sforce.connection.query("select User__c from Profiled_Users__c where Profile_to_Include__c=true order by User__c limit 1");
                nUserRecords = nuser.getArray("records");
                nextuserid = nUserRecords[0].User__c;
            }
            else
            {
                // Execute this code for subsequent iterations other than the first iteration
                nuser = sforce.connection.query("select User__c from Profiled_Users__c where Profile_to_Include__c=true order by User__c  limit " + (parseInt(record.ContextIterator__c) + 1));
                recNuser = nuser.getArray("records");
                for(var j = 0; j < recNuser.length; j++)
                nextuserid = recNuser[j].User__c;
            }
  
            var blnObjectAccess = 'false';
            try
            {
                getObj = sforce.connection.query("select ObjectName__c from DataInput__c limit 1");
                recObj = getObj.getArray("records");
                objValue = recObj[0].ObjectName__c;
                var rresult = sforce.connection.describeLayout(objValue);
            }
            catch(error)
            {
                blnObjectAccess = 'true';
            }
        
            if( blnObjectAccess == 'false')
                layoutResults(rresult,state,nextuserid,parseInt(record.ContextIterator__c),parseInt(profileUserCounter));
            
            insertinBatches(pData);
                        
            var strURL = '/servlet/servlet.su?oid=' + record.Name + '&suorgadminid=' + nextuserid + '&retURL=%2Fapex%2FVFP01_Processor&targetURL=%2Fapex%2FVFP01_Processor';
            var fURL = new sforce.SObject("FLURL__c");
            fURL.nextURL__c = strURL ;
                    
            if(parseInt(record.ContextIterator__c) == 0)
            {
                    fURL.InvokeCounter__c = 0;
                    fURL = sforce.connection.create([fURL]);
            }
            else
            {
                    // Get the current URL
                    resultFL = sforce.connection.query("Select Id,nextURL__c,InvokeCounter__c from FLURL__c limit 1");
                    recordsFL = resultFL.getArray("records");
                    var recordFL = recordsFL[0];
                    fURL.id = recordFL.Id
                    fURL = sforce.connection.update([fURL]);
            }
            setTimeout("location.reload(true);","2000");
        }
    }

    function queryFailed(error, source) 
    {
        source.output.innerHTML = "An error has occurred: " + error;
    }

    // This function gives you the layouts on the selected object.
    function layoutResults(result,source,nextuserid,counter,totcounter)
    {
        source.output.innerHTML = '<Font size="3"><b><br/>    Salesforce is generating the report,Please be patient...</b></Font>' ;
        var layouts = result.getArray("layouts");
        if(layouts != null)
        {
            for (var i=0; i<layouts.length; i++) 
            {
                var layout = layouts[i];
                //source.output.innerHTML = source.output.innerHTML + '<br/><br/>' + layout.id + '</br>';
                detailLayoutSections(layout.detailLayoutSections, source,nextuserid,counter,layout.id);
                var layotsLength = layouts.length;
                var perct = (i+1)/layotsLength;
                var profcal = (parseInt(counter)+1)/parseInt(totcounter);
                var perShare = (2/parseInt(totcounter));
                var finPer = profcal - perShare;
                var cumPer = perShare*perct;
                var totPer = finPer + cumPer;
                var fResult = Math.round(totPer*100);
                source.output.innerHTML = '<Font size="3"><b><br/>    Salesforce is generating the report,Please be patient...' + fResult + ' % completed.</b></Font>'  ;
            }
        }
        
    }

    // This function gives you the sections on a given page layout.
    function detailLayoutSections(sections, source,nextuserid,counter,layoutid) 
    {
        if(sections !=null)
        {
            for (var i =0; i < sections.length; i++) 
            {
                var section = sections[i];
                //source.output.innerHTML = source.output.innerHTML + '<br/>' + " " + section.columns + ":" + section.heading + ":" + '<br/>';
                layoutRows(section.getArray("layoutRows"),source,nextuserid,counter,layoutid);
            }
        }
    }

    // This function gives the layout rows in a layout section.
    function layoutRows(rows,source,nextuserid,counter,layoutid) 
    {
        if(rows != null)
        {
            for (var i =0; i < rows.length; i++) 
            {
                var row = rows[i];
                layoutItems(row.getArray("layoutItems"),source,nextuserid,counter,layoutid);
            }
        }
    }

    // This function gives the layout items on a single row.
    function layoutItems(items,source,nextuserid,counter,layoutid) 
    {
        if(items!=null)
        {
            for (var i=0; i<items.length; i++) 
            {
                var item = items[i];
                var reportData = new sforce.SObject("ReportData__c");
                reportData.Name = layoutid;
                reportData.FieldName__c = item.label;
                    
                    // Populate the report data
                    if(item.label!='')
                    //var result = sforce.connection.create([reportData]);   
                    pData.push(reportData);
            }
        }
    }
    
    
    // Function to insert the records in batches of 200
    function insertinBatches(pData)
    {
            if(pData.length >0)
            {
                if(pData.length<=200)
                {
                    var result = sforce.connection.create(pData);  
                }
                else
                {
                     for(var batchCount=0;batchCount<pData.length;batchCount=batchCount+200)
                     {
                         var result1;
                         if((batchCount+200)<pData.length)
                             result1 = sforce.connection.create(pData.slice(batchCount,batchCount + 200));
                         else
                             result1 = sforce.connection.create(pData.slice(batchCount,pData.length));
                             
                               for (var i=0; i<result1.length; i++) {
                               if (result1[i].getBoolean("success")) {
                               } else {
                                   //alert(result1[i]);
                               }
                               }
                     }
                }
            }
    }
</script>
<div id="output"> </div>
</apex:page>